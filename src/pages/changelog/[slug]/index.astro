---
import type { Author, Changelog } from '@types';
import type { CollectionEntry } from 'astro:content';

import { getCollection, getEntry, render } from 'astro:content';

import { slugifyStr } from '@utils/slugify';

import ChangelogLayout from '@layouts/changelog/ChangelogLayout.astro';

import { buttonVariants } from '@components/ui/button';
import ShareLinks from '@components/common/ShareLinks.astro';
import { TOP_NAVIGATION } from '@config';

export interface Props {
  changelog: CollectionEntry<'changelog'>;
  changelogs: CollectionEntry<'changelog'>[];
}

export async function getStaticPaths() {
  const changelogs = await getCollection('changelog', ({ data }) => !data.draft);

  const changelogResult = changelogs.map((changelog) => ({
    params: { slug: changelog.id },
    props: { changelog, changelogs }
  }));

  return changelogResult;
}

const { changelog, changelogs } = Astro.props;

const author = await getEntry('author', changelog.data.author.id);

const ogImageUrl =
  typeof changelog.data.ogImage === 'string'
    ? changelog.data.ogImage
    : changelog.data.ogImage?.src;
const ogUrl = new URL(
  ogImageUrl ?? `/changelog/${slugifyStr(changelog.data.title)}.png`,
  Astro.url.origin
).href;

const computedChangelog = {
  headline: changelog.data.title,
  description: changelog.data.description,
  datePublished: changelog.data.pubDatetime.toISOString(),
  image: ogUrl,
  url: `${TOP_NAVIGATION.changelog}/${changelog.id}`,
  author: author.data as Author
} satisfies Changelog;

const { Content } = await render(changelog);

/* ========== Prev/Next Posts ========== */

const allChangelogs = changelogs.map(({ data: { title }, id }) => ({
  id,
  title
}));

const currentPostIndex = allChangelogs.findIndex((a) => a.id === changelog.id);

const prevPost = currentPostIndex !== 0 ? allChangelogs[currentPostIndex - 1] : null;
const nextPost =
  currentPostIndex !== allChangelogs.length ? allChangelogs[currentPostIndex + 1] : null;
---

<ChangelogLayout changelog={computedChangelog} author={author.data as Author}>
  <button
    class={buttonVariants({ variant: 'default' })}
    onclick="(() => (history.length === 1) ? window.location = '/' : history.back())()">
    <span>Go back</span>
  </button>
  <div class="text-2xl font-bold">
    {changelog.data.title}
  </div>
  <div class="text-xl">
    {changelog.data.description}
  </div>
  <div class="mt-4 px-4">
    <Content class="prose" />
  </div>

  <button id="back-to-top" class={buttonVariants({ variant: 'default' })}>
    <span>Back to Top</span>
  </button>

  <ShareLinks />

  <!-- Previous/Next Post Buttons -->
  <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
    {
      prevPost && (
        <a href={`/changelog/${prevPost.id}`} class="flex w-full gap-1 hover:opacity-75">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="icon icon-tabler icons-tabler-outline icon-tabler-chevron-left flex-none">
            <>
              <path stroke="none" d="M0 0h24v24H0z" fill="none" />
              <path d="M15 6l-6 6l6 6" />
            </>
          </svg>
          <div>
            <span>Previous Post</span>
            <div class="text-skin-accent/85 text-sm">{prevPost.title}</div>
          </div>
        </a>
      )
    }
    {
      nextPost && (
        <a
          href={`/changelog/${nextPost.id}`}
          class="flex w-full justify-end gap-1 text-right hover:opacity-75 sm:col-start-2">
          <div>
            <span>Next Post</span>
            <div class="text-skin-accent/85 text-sm">{nextPost.title}</div>
          </div>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="icon icon-tabler icons-tabler-outline icon-tabler-chevron-right flex-none">
            <>
              <path stroke="none" d="M0 0h24v24H0z" fill="none" />
              <path d="M9 6l6 6l-6 6" />
            </>
          </svg>
        </a>
      )
    }
  </div>
</ChangelogLayout>

<script is:inline data-astro-rerun>
  /** Create a progress indicator
   *  at the top */
  function createProgressBar() {
    // Create the main container div
    const progressContainer = document.createElement('div');
    progressContainer.className =
      'progress-container fixed top-0 z-10 h-1 w-full bg-green-500';

    // Create the progress bar div
    const progressBar = document.createElement('div');
    progressBar.className = 'progress-bar h-1 w-0 bg-green-700';
    progressBar.id = 'myBar';

    // Append the progress bar to the progress container
    progressContainer.appendChild(progressBar);

    // Append the progress container to the document body or any other desired parent element
    document.body.appendChild(progressContainer);
  }
  createProgressBar();

  /** Update the progress bar
   *  when user scrolls */
  function updateScrollProgress() {
    document.addEventListener('scroll', () => {
      const winScroll = document.body.scrollTop || document.documentElement.scrollTop;
      const height =
        document.documentElement.scrollHeight - document.documentElement.clientHeight;
      const scrolled = (winScroll / height) * 100;
      if (document) {
        const myBar = document.getElementById('myBar');
        if (myBar) {
          myBar.style.width = scrolled + '%';
        }
      }
    });
  }
  updateScrollProgress();

  /** Attaches links to headings in the document,
   *  allowing sharing of sections easily */
  function addHeadingLinks() {
    const headings = Array.from(document.querySelectorAll('h2, h3, h4, h5, h6'));
    for (const heading of headings) {
      heading.classList.add('group');
      const link = document.createElement('a');
      link.className =
        'heading-link ml-2 opacity-0 group-hover:opacity-100 focus:opacity-100';
      link.href = '#' + heading.id;

      const span = document.createElement('span');
      span.ariaHidden = 'true';
      span.innerText = '#';
      link.appendChild(span);
      heading.appendChild(link);
    }
  }
  addHeadingLinks();

  /** Attaches copy buttons to code blocks in the document,
   * allowing users to copy code easily. */
  function attachCopyButtons() {
    const copyButtonLabel = 'Copy';
    const codeBlocks = Array.from(document.querySelectorAll('pre'));

    for (const codeBlock of codeBlocks) {
      const wrapper = document.createElement('div');
      wrapper.style.position = 'relative';

      const copyButton = document.createElement('button');
      copyButton.className =
        'copy-code absolute right-3 -top-3 rounded bg-skin-card px-2 py-1 text-xs leading-4 text-skin-base font-medium';
      copyButton.innerHTML = copyButtonLabel;
      codeBlock.setAttribute('tabindex', '0');
      codeBlock.appendChild(copyButton);

      // wrap codebock with relative parent element
      codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener('click', async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    async function copyCode(block, button) {
      const code = block.querySelector('code');
      const text = code?.innerText;

      await navigator.clipboard.writeText(text ?? '');

      // visual feedback that task is completed
      button.innerText = 'Copied';

      setTimeout(() => {
        button.innerText = copyButtonLabel;
      }, 700);
    }
  }
  attachCopyButtons();

  /** Scrolls the document to the top when
   * the "Back to Top" button is clicked. */
  function backToTop() {
    document.querySelector('#back-to-top')?.addEventListener('click', () => {
      document.body.scrollTop = 0; // For Safari
      document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
    });
  }
  backToTop();

  /* Go to page start after page swap */
  document.addEventListener('astro:after-swap', () =>
    window.scrollTo({ left: 0, top: 0, behavior: 'instant' })
  );
</script>
